<?php namespace Ilume\Frontend\Components;

use Cms\Classes\ComponentBase;
use Illuminate\Support\Facades\Storage;
use Ilume\Frontend\Classes\InvalidExtApiCacheTimeException;
use Ilume\Frontend\Classes\MissingExtApiKeyException;
use Ilume\Frontend\Classes\MissingExtApiUrlException;
use League\Flysystem\FileNotFoundException;
use October\Rain\Network\Http;

class ExtApiProvisioner extends ComponentBase
{
    private $extApiFeedList = [];

    public function componentDetails()
    {
        return [
            'name'        => 'ExternalApiFeed Component',
            'description' => 'Fetches pre-set API URLs from external sources and adds the responses to the frontend'
        ];
    }

    public function defineProperties()
    {
        return [];
    }

    public function onRender()
    {
        parent::onRender(); // TODO: Change the autogenerated stub

        $this->page['extApiFeedList'] = $this->extApiFeedList;
    }

    public function init()
    {
        if ($this->controller->getPage() == null || $this->controller->getPage()->id == null) {
            return;
        }

        // First get a title for the page as reference
        $pageId = $this->controller->getPage()->id;
        $pageCacheBaseKey = str_slug($pageId);

        if (!isset($this->controller->getPage()->apiBag['staticPage']['settings']['components']['viewBag'])) {
            return;
        }

        // Check if the page has additional api feed data
        $apiBag = $this->controller->getPage()->apiBag['staticPage']['settings']['components']['viewBag'];
        if (!array_key_exists("custom_api_feed_urls", $apiBag)) {
            return;
        }

        $feedEntries = $apiBag['custom_api_feed_urls'];

        foreach($feedEntries as $entry) {
            $apiKey = isset($entry['data_key']) ? $entry['data_key'] : "";
            $cacheLifetime = isset($entry['cache_time']) ? $entry['cache_time'] : 0;
            $apiUrl = isset($entry['api_url']) ? $entry['api_url'] : "";

            // Check for a missing apiKey
            if (strlen($apiKey) == 0) {
                throw new MissingExtApiKeyException("The Storage ID is missing");
            }

            // Check for an invalid cache lifetime value
            if (intval($cacheLifetime) < 1) {
                throw new InvalidExtApiCacheTimeException("The value of Cache Time is invalid (" . $cacheLifetime . ")");
            }

            // Check for a missing apiKey
            if (strlen($apiUrl) == 0) {
                throw new MissingExtApiUrlException("The API URL is missing");
            }

            // Check if there is a cache available to deny unnecessary API Calls
            $cacheKey = $pageCacheBaseKey . '-' . str_slug($apiKey);
            $cacheFilePath = "extapicache/" . $cacheKey . '.apicache';

            $lastModified = -1;
            try {
                $lastModified = Storage::lastModified($cacheFilePath);
            } catch (FileNotFoundException $e) { /* No further action required, default value will be used */ }


            $cachedData = false;
            if ($lastModified >= 0 && (time() - $lastModified) < ($cacheLifetime * 60)) {
                // Get the cached storage
                $cachedData = Storage::get($cacheFilePath);
            }

            if ($cachedData) {
                $this->extApiFeedList[$apiKey] = $cachedData;
            } else {
                if (strlen($apiKey) > 0 && strlen($apiUrl) > 0) {
                    $response = Http::get($apiUrl);

                    if (strlen($response->body) > 0) {
                        $this->extApiFeedList[$apiKey] = $response;

                        Storage::put($cacheFilePath, $response);
                    }
                }
            }
        }
    }
}
